import streamlit as st
import pandas as pd
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import traceback

st.set_page_config(page_title="‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏õ‡∏µ 2567", layout="wide")
st.title("‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏õ‡∏µ 2567")

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheets
scope = ["https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive.file",
         "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_info(
    st.secrets["gcp_service_account"], scopes=scope
)
client = gspread.authorize(creds)

try:
    spreadsheet = client.open_by_key("16QNx4xaRjgvPnimZvS5nVA8HPcDTWg98QXKnCgWa7Xw")
    st.success("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    sheet = spreadsheet.worksheet("A1")  # ‡∏´‡∏£‡∏∑‡∏≠ .sheet1 ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ default sheet
except Exception as e:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheets ‡πÑ‡∏î‡πâ:")
    st.code(traceback.format_exc())
    st.stop()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Sheet (cache ‡πÑ‡∏ß‡πâ 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
@st.cache_data(ttl=300)
def load_existing_records(sheet):
    return sheet.get_all_records()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß
def find_existing_row(records, exam_id, committee_id):
    for i, row in enumerate(records, start=2):  # row 1 ‡πÄ‡∏õ‡πá‡∏ô header
        if str(row.get("exam_id", "")) == exam_id and str(row.get("committee_id", "")) == committee_id:
            return i
    return None

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV
@st.cache_data
def load_exam_data():
    return pd.read_csv("exam_schedule.csv", dtype=str)

data = load_exam_data()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏à‡∏≤‡∏Å exam_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≠‡∏ö
exam_dict = dict(zip(data["exam_id"], zip(data["name"], data["time"])))

# ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
col1, col2, col3 = st.columns(3)
with col1:
    exam_id = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏™‡∏≠‡∏ö", list(exam_dict.keys()))
with col2:
    committee_id = st.selectbox("‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà", ["1", "2", "3"])
with col3:
    exam_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö", datetime.today())

# ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å CSV
default_name, default_time = exam_dict.get(exam_id, ("", ""))

col4, col5 = st.columns(2)
with col4:
    name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö", value=default_name)
with col5:
    time = st.text_input("‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≠‡∏ö", value=default_time)

st.divider()
st.subheader("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ (0 - 5)")

# ‡πÉ‡∏ä‡πâ radio ‡πÅ‡∏ó‡∏ô slider
def radio_group(title, questions):
    st.markdown(f"### {title}")
    total = 0
    for q in questions:
        score = st.radio(q, [0, 1, 2, 3, 4, 5], horizontal=True, index=0, key=q)
        total += score
    return total

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
sum1 = radio_group("1. ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ß‡∏¥‡∏ô‡∏±‡∏¢", [
    "1.1 ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏™‡∏á‡πà‡∏≤", "1.2 ‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "1.3 ‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û", "1.4 ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå"])
sum2 = radio_group("2. ‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡πÑ‡∏´‡∏ß‡∏û‡∏£‡∏¥‡∏ö", [
    "2.1 ‡∏ï‡∏≠‡∏ö‡πÄ‡∏£‡πá‡∏ß", "2.2 ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°", "2.3 ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à", "2.4 ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢"])
sum3 = radio_group("3. ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ", [
    "3.1 ‡∏ï‡∏£‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", "3.2 ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå", "3.3 ‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•", "3.4 ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"])
sum4 = radio_group("4. ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå", [
    "4.1 ‡∏Ñ‡∏¥‡∏î‡πÄ‡∏ä‡∏¥‡∏á‡∏£‡∏∞‡∏ö‡∏ö", "4.2 ‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", "4.3 ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏î‡∏µ"])
sum5 = radio_group("5. ‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏´‡∏≤‡∏£/‡∏Ñ‡∏∏‡∏ì‡∏ò‡∏£‡∏£‡∏°", [
    "5.1 ‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≠‡∏á‡∏ó‡∏±‡∏û", "5.2 ‡∏ó‡∏±‡∏®‡∏ô‡∏Ñ‡∏ï‡∏¥‡∏î‡∏µ", "5.3 ‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏¢‡∏ò‡∏£‡∏£‡∏°"])

total_score = sum1 + sum2 + sum3 + sum4 + sum5
st.success(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_score} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")

comment = st.text_area("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", "")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å Sheet (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
records = load_existing_records(sheet)
existing_row = find_existing_row(records, exam_id, committee_id)
confirm_update = None

if existing_row:
    st.warning("‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ")
    confirm_update = st.radio(
        "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
        ["‡πÑ‡∏°‡πà", "‡πÉ‡∏ä‡πà"],
        horizontal=True,
        key="confirm_update_radio"
    )

if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"):
    new_row = [
        exam_id, committee_id, name,
        exam_date.strftime('%Y-%m-%d'), time,
        sum1, sum2, sum3, sum4, sum5,
        total_score, comment
    ]

    try:
        if existing_row:
            if confirm_update == "‡πÉ‡∏ä‡πà":
                sheet.update(f"A{existing_row}:M{existing_row}", [new_row])
                st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô Google Sheets!")
                st.toast("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", icon="üîÑ")
                st.balloons()
            else:
                st.info("‚ÑπÔ∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
        else:
            sheet.append_row(new_row)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà Google Sheets!")
            st.toast("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", icon="üì•")
            st.balloons()
    except Exception as e:
        st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        st.code(traceback.format_exc())
