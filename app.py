import streamlit as st
import pandas as pd
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import traceback

st.set_page_config(page_title="‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏õ‡∏µ 2567", layout="wide")
st.title("‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏õ‡∏µ 2567")

SPREADSHEET_KEY = "16QNx4xaRjgvPnimZvS5nVA8HPcDTWg98QXKnCgWa7Xw"
WORKSHEET_NAME = "A1"

# ---------- CONNECT TO GOOGLE SHEET ----------
def connect_sheet():
    try:
        scope = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive"
        ]
        creds = Credentials.from_service_account_info(
            st.secrets["gcp_service_account"], scopes=scope
        )
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_key(SPREADSHEET_KEY)
        return spreadsheet.worksheet(WORKSHEET_NAME)
    except Exception as e:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheets ‡πÑ‡∏î‡πâ:")
        st.code(traceback.format_exc())
        st.stop()

sheet = connect_sheet()
st.success("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# ---------- CACHE EXISTING RECORDS ----------
@st.cache_data(ttl=300)
def load_existing_records():
    try:
        sheet_cached = connect_sheet()
        return sheet_cached.get_all_records()
    except Exception:
        return []

# ---------- LOAD EXAM CSV ----------
@st.cache_data
def load_exam_data():
    return pd.read_csv("exam_schedule.csv", dtype=str)

data = load_exam_data()
exam_dict = dict(zip(data["exam_id"], zip(data["name"], data["time"])))

# ---------- NEW EVALUATION QUESTIONS ----------
all_questions = [
    "1.1 ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û, ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°", "1.2 ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°", "1.3 ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô", "1.4 ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏û‡∏π‡∏î",
    "2.1 ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß", "2.2 ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°", "2.3 ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", "2.4 ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤",
    "3.1 ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤", "3.2 ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤", 
    "3.3 ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡πÑ‡∏ó‡∏¢ ‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡πÇ‡∏•‡∏Å ‡πÅ‡∏•‡∏∞‡∏Å‡∏≠‡∏á‡∏ó‡∏±‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "3.4 ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®",
    "4.1 ‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", "4.2 ‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", 
    "4.3 ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "4.4 ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏ô‡πÄ‡∏≠‡∏á/‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß",
    "5.1 ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ô‡∏¥‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏®‡∏ô‡∏Ñ‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏´‡∏≤‡∏£", "5.2 ‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", 
    "5.3 ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå", "5.4 ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"
]

# ---------- FORM SECTION ----------
col1, col2, col3 = st.columns(3)
with col1:
    exam_id = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏™‡∏≠‡∏ö", list(exam_dict.keys()))
with col2:
    committee_id = st.selectbox("‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà", ["1", "2", "3"])
with col3:
    exam_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö", datetime.today())

default_name, default_time = exam_dict.get(exam_id, ("", ""))
col4, col5 = st.columns(2)
with col4:
    name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≠‡∏ö", value=default_name)
with col5:
    time = st.text_input("‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≠‡∏ö", value=default_time)

# ---------- LOAD SCORES OR RESET ----------
records = load_existing_records()
record = next(
    (r for r in records if str(r.get("exam_id")) == exam_id and str(r.get("committee_id")) == committee_id),
    None
)

def load_scores_to_session(record):
    for q in all_questions:
        if q not in st.session_state:
            try:
                st.session_state[q] = int(record.get(q, 0))
            except:
                st.session_state[q] = 0
    if "comment" not in st.session_state:
        st.session_state["comment"] = record.get("comment", "")

def clear_scores_session_state():
    for q in all_questions:
        st.session_state[q] = 0
    st.session_state["comment"] = ""

# ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå session_state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô exam_id ‡∏´‡∏£‡∏∑‡∏≠ committee_id
if "prev_exam_id" not in st.session_state:
    st.session_state["prev_exam_id"] = None
if "prev_committee_id" not in st.session_state:
    st.session_state["prev_committee_id"] = None

if (st.session_state["prev_exam_id"] != exam_id) or (st.session_state["prev_committee_id"] != committee_id):
    clear_scores_session_state()
    st.session_state["prev_exam_id"] = exam_id
    st.session_state["prev_committee_id"] = committee_id

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ record ‡∏à‡∏£‡∏¥‡∏á
if record:
    load_scores_to_session(record)
else:
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ record ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÅ‡∏ï‡πà session_state ‡∏≠‡∏≤‡∏à‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô
    pass

# ---------- RADIO GROUP ----------
def radio_group(title, questions):
    st.markdown(f"### {title}")
    total = 0
    for q in questions:
        score = st.radio(
            q,
            options=[0, 1, 2, 3, 4, 5],
            horizontal=True,
            index=st.session_state.get(q, 0),
            key=q
        )
        total += score
    return total

st.divider()
st.subheader("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ (0 - 5)")

sum1 = radio_group("1. ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î", all_questions[0:4])
sum2 = radio_group("2. ‡∏õ‡∏è‡∏¥‡∏†‡∏≤‡∏ì‡πÑ‡∏´‡∏ß‡∏û‡∏£‡∏¥‡∏ö", all_questions[4:8])
sum3 = radio_group("3. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à", all_questions[8:12])
sum4 = radio_group("4. ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏®‡∏ô‡∏Ñ‡∏ï‡∏¥", all_questions[12:16])
sum5 = radio_group("5. ‡∏Ñ‡∏∏‡∏ì‡∏ò‡∏£‡∏£‡∏°/‡∏à‡∏£‡∏¥‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ó‡∏´‡∏≤‡∏£", all_questions[16:20])

total_score = sum1 + sum2 + sum3 + sum4 + sum5
st.success(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_score} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")

comment = st.text_area("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", st.session_state.get("comment", ""))
st.session_state["comment"] = comment

# ---------- FIND ROW ----------
def find_existing_row(records, exam_id, committee_id):
    for i, row in enumerate(records, start=2):  # header is row 1
        if str(row.get("exam_id", "")) == exam_id and str(row.get("committee_id", "")) == committee_id:
            return i
    return None

existing_row = find_existing_row(records, exam_id, committee_id)
confirm_update = None

if existing_row:
    st.warning("‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ")
    confirm_update = st.radio(
        "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
        ["‡πÑ‡∏°‡πà", "‡πÉ‡∏ä‡πà"],
        horizontal=True,
        key="confirm_update_radio"
    )

# ---------- SUBMIT ----------
if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"):
    new_row = [
        exam_id, committee_id, name,
        exam_date.strftime('%Y-%m-%d'), time,
        sum1, sum2, sum3, sum4, sum5,
        total_score, comment
    ]

    for q in all_questions:
        new_row.append(st.session_state[q])

    try:
        if existing_row and confirm_update == "‡πÉ‡∏ä‡πà":
            end_col = chr(ord('A') + len(new_row) - 1)
            sheet.update(f"A{existing_row}:{end_col}{existing_row}", [new_row])
            st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô Google Sheets!")
            st.toast("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", icon="üîÑ")
            st.balloons()
        elif not existing_row:
            sheet.append_row(new_row)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà Google Sheets!")
            st.toast("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", icon="üì•")
            st.balloons()
        else:
            st.info("‚ÑπÔ∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
    except Exception:
        st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        st.code(traceback.format_exc())
